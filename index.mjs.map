{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar cospi = require( '@stdlib/math-base-special-cospi' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar A0 = 0.62;\nvar A1 = 0.48;\nvar A2 = 0.38;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a Bartlett-Hann window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {integer} T - period\n* @param {number} A - amplitude\n* @returns {number} function value\n*/\nfunction bartlettHann( t, T, A ) {\n\tT -= 1;\n\treturn A * ( A0 - (A1*abs( (t/T)-0.5) ) - (A2*cospi( (2.0/T)*t) ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? bartlettHann( t, opts.duration, opts.amplitude ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterBartlettHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @module @stdlib/simulate-iter-bartlett-hann-pulse\n*\n* @example\n* var iterBartlettHannPulse = require( '@stdlib/simulate-iter-bartlett-hann-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["isPlainObject","require$$0","hasOwnProp","require$$1","isPositiveNumber","require$$2","isPrimitive","isInteger","require$$3","isPositiveInteger","require$$4","isNonNegativeInteger","require$$5","format","require$$6","setReadOnly","iteratorSymbol","abs","cospi","validate","opts","options","duration","TypeError","period","amplitude","offset","iter","bartlettHann","t","T","A","main","iterBartlettHannPulse","FLG","err","i","arguments","length","RangeError","next","end","factory","done","value","lib"],"mappings":";;++BAsBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAmBC,EAA+CC,YAClEC,EAAYC,EAAuCF,YACnDG,EAAoBC,EAAgDJ,YACpEK,EAAuBC,EAAmDN,YAC1EO,EAASC,EAoEb,IC1EIC,EAAcd,EACde,EAAiBb,EACjBc,EAAMZ,EACNa,EAAQV,EACRK,EAASH,EACTS,ED6BJ,SAAmBC,EAAMC,GACxB,OAAMrB,EAAeqB,GAGhBnB,EAAYmB,EAAS,cACzBD,EAAKE,SAAWD,EAAQC,UAClBb,EAAmBY,EAAQC,WACzB,IAAIC,UAAWV,EAAQ,wEAAyE,WAAYQ,EAAQC,WAGxHpB,EAAYmB,EAAS,YACzBD,EAAKI,OAASH,EAAQG,QAChBf,EAAmBY,EAAQG,SACzB,IAAID,UAAWV,EAAQ,wEAAyE,SAAUQ,EAAQG,SAGtHtB,EAAYmB,EAAS,eACzBD,EAAKK,UAAYJ,EAAQI,WACnBrB,EAAkBiB,EAAQI,YACxB,IAAIF,UAAWV,EAAQ,uEAAwE,YAAaQ,EAAQI,YAGxHvB,EAAYmB,EAAS,YACzBD,EAAKM,OAASL,EAAQK,QAChBnB,EAAWc,EAAQK,SACjB,IAAIH,UAAWV,EAAQ,gEAAiE,SAAUQ,EAAQK,SAG9GxB,EAAYmB,EAAS,UACzBD,EAAKO,KAAON,EAAQM,MACdhB,EAAsBU,EAAQM,OAC5B,IAAIJ,UAAWV,EAAQ,2EAA4E,OAAQQ,EAAQM,OAGrH,KAhCC,IAAIJ,UAAWV,EAAQ,qEAAsEQ,KCVtG,SAASO,EAAcC,EAAGC,EAAGC,GAE5B,OAAOA,GAlBC,IACA,IAiBcd,EAAMY,GAD5BC,GAAK,GAC4B,IAhBzB,IAgBsCZ,EAAQ,EAAIY,EAAGD,IA6I9D,IAAAG,EAtGA,SAASC,EAAuBZ,GAC/B,IAAID,EACAO,EACAO,EACAC,EACAN,EACAO,EASJ,GAPAhB,EAAO,CACNE,UAAa,EACbE,OAAU,IACVC,UAAa,EACbC,OAAU,EACVC,KAAQ,OAEJU,UAAUC,SACdH,EAAMhB,EAAUC,EAAMC,IAErB,MAAMc,EAMR,IAHwB,IAAnBf,EAAKE,WACTF,EAAKE,SAAWF,EAAKI,QAEjBJ,EAAKE,SAAWF,EAAKI,OACzB,MAAM,IAAIe,WAAY1B,EAAQ,sFAAuF,WAAYO,EAAKE,WAEvI,GAAKF,EAAKE,UAAY,EACrB,MAAM,IAAIiB,WAAY1B,EAAQ,oEAAsE,WAAYO,EAAKE,WAkBtH,OAhBAO,GAAMT,EAAKI,OAAOJ,EAAKM,QAAWN,EAAKI,QAC9B,IACRK,GAAKT,EAAKI,QAEXK,GAAK,EACLO,EAAI,EAIJrB,EADAY,EAAO,GACY,OAAQa,GAC3BzB,EAAaY,EAAM,SAAUc,GAGxBzB,GACJD,EAAaY,EAAMX,EAAgB0B,GAE7Bf,EAQP,SAASa,IAER,OADAJ,GAAK,EACAF,GAAOE,EAAIhB,EAAKO,KACb,CACNgB,MAAQ,GAIH,CACNC,OAFDf,GAAKA,EAAE,GAAKT,EAAKI,QAEDJ,EAAKE,SAAaM,EAAcC,EAAGT,EAAKE,SAAUF,EAAKK,WAAc,EACpFkB,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAV,GAAM,EACDG,UAAUC,OACP,CACNM,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOT,EAAuBb,KCnIhCyB,EALe5C"}